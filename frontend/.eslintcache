[{"/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/reportWebVitals.js":"1","/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/index.js":"2","/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/App.js":"3","/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/components/login/login.jsx":"4","/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/components/login/index.js":"5"},{"size":362,"mtime":1611936242753,"results":"6","hashOfConfig":"7"},{"size":500,"mtime":1611936242751,"results":"8","hashOfConfig":"7"},{"size":990,"mtime":1611999752378,"results":"9","hashOfConfig":"7"},{"size":3964,"mtime":1611999884065,"results":"10","hashOfConfig":"7"},{"size":54,"mtime":1611997780504,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ag3bb8",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/reportWebVitals.js",[],"/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/index.js",[],"/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/App.js",["23"],"/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/components/login/login.jsx",["24"],"import { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport axios from 'axios' // http client\nimport BarLoader from 'react-spinners/BarLoader'\n\nimport './index.scss' // additional styling.\n\n/**\n * Login form component. Calling the endpoint /adviz/login on the backend when the form is submitted.\n */\nconst Login = ({ onSuccess }) => {\n    const [username, setUsername] = useState('')\n    const [password, setPassword] = useState('')\n    const [error, setError] = useState(false)\n    const [isLoading, setIsLoading] = useState(false)\n\n    /**\n     * Function to handle changes of the value within the username input\n     * @param {React.ChangeEvent<HTMLInputElement} e\n     */\n    const handleChangeUsername = (e) => {\n        setUsername(e.target.value)\n    }\n\n    /**\n     * Function to handle changes of the value within the password input\n     * @param {React.ChangeEvent<HTMLInputElement} e\n     */\n    const handleChangePass = (e) => {\n        setPassword(e.target.value)\n    }\n\n    /**\n     * Function to handle form submit\n     * @param {React.FormEvent<HTMLFormElement} e\n     */\n    const handleSubmit = async (e) => {\n        e.preventDefault()\n\n        const url = '/adviz/login'\n        setIsLoading(true)\n\n        try {\n            await axios.post(url, {\n                userId: username,\n                password,\n            })\n\n            await onSuccess(username)\n        } catch (e) {\n            console.error(e)\n            setError(true)\n        } finally {\n            setIsLoading(false)\n        }\n    }\n\n    const imgUrl =\n        'https://images.unsplash.com/photo-1512626120412-faf41adb4874?ixlib=rb-1.2.1&ixid=MXwxMjA3fDB8MHxzZWFyY2h8MXx8Y29udGFjdHxlbnwwfHwwfA%3D%3D&auto=format&fit=crop&w=500&q=60'\n\n    return (\n        <section id=\"login\" className=\"login-section modal\">\n            {isLoading && (\n                <div className=\"loading-modal\">\n                    <BarLoader color=\"#5e7ce2\" height={4} width={100} />\n                </div>\n            )}\n            <img src={imgUrl} />\n            <div className=\"container\">\n                <h1>Welcome to adviz! please login to continue</h1>\n                <form className=\"styled\" onSubmit={handleSubmit}>\n                    <label htmlFor=\"username\">\n                        username:\n                        <input\n                            type=\"text\"\n                            id=\"username\"\n                            name=\"username\"\n                            placeholder=\"Username\"\n                            required\n                            value={username}\n                            onChange={handleChangeUsername}\n                        />\n                    </label>\n                    <label htmlFor=\"password\">\n                        password:\n                        <input\n                            type=\"password\"\n                            id=\"password\"\n                            name=\"password\"\n                            placeholder=\"Password\"\n                            required\n                            value={password}\n                            onChange={handleChangePass}\n                        />\n                    </label>\n\n                    {error && (\n                        <div id=\"login-error\" className=\"error\">\n                            ðŸ˜ž Wrong password / username\n                        </div>\n                    )}\n                    <button className=\"primary\" type=\"submit\">\n                        <span\n                            className=\"iconify\"\n                            data-icon=\"eva:unlock-outline\"\n                            data-inline=\"false\"\n                        />\n                        Login\n                    </button>\n                </form>\n            </div>\n        </section>\n    )\n}\n\nLogin.propTypes = {\n    /**\n     * Function to be called when login operation is succesful\n     */\n    onSucces: PropTypes.func.isRequired,\n}\n\nexport { Login }\n","/mnt/c/Users/louis/Documents/dev/htw/sem3/adviz/frontend/src/components/login/index.js",[],{"ruleId":"25","severity":1,"message":"26","line":25,"column":12,"nodeType":"27","messageId":"28","endLine":25,"endColumn":20},{"ruleId":"29","severity":1,"message":"30","line":68,"column":13,"nodeType":"31","endLine":68,"endColumn":33},"no-unused-vars","'currUser' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]